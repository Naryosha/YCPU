.target ycpu
.alu_width 16

; interrupt table
.dat16 start,  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
.dat16 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000

lod.8   a, 255
lod.16  a, 2000
lod.8   a, 2000

next_rand:
psh a
mul y, 10061
pop a
add y, 1
rts

start:
lod c, 0x1234 ; rand_seed
lod y, c ; cur_rand
baw main_loop

main_loop:
lod i, 0
lod x, y
lod y, c
lod a, 0x8000

next_row1:
  lod j, 0
  next_char1:
    jsr next_rand
    lod b, [a]          ; ife [a], 0
    beq skip1           ; jmp skip1
    cmp y, 0x7000       ; ifb y, 0x7000
    bne skip1           ; jmp skip1

    ; mutate char at [a] (j, i)
    psh y
    lod y, x
    jsr next_rand
    
    lod b, [a]          ; and [a], 0xff00 ; reset char
    and b, 0xff00
    and y, 0x003f
    psh a
    lod a, [chars,y]
    and a, 0x00ff
    orr b, a            ; bor [a], [chars+y] ; set letter
    pop a
    sto b, [a]
    lod x, y
    pop y
    
    skip1:
    add j, 1
    add a, 2
    cmp j, 32           ; ifg 32, j
    bne next_char1      ; jmp next_char1
    
  add i, 1
  cmp i, 12             ; ifg 12, i
  bne next_row1         ; jmp next_row1
  
lod y, x

; step 2 - move all columns down
lod i, 12
lod a, 0x82FE

next_row2:
  lod j, 32
  next_char2:
    lod b, [a]          ; ife [a], 0
    beq empty_char      ; jmp empty_char
    lod b, [a,32]       ; ifb [32+a], 0xffff
    bne move_down       ; jmp move_down
    
    ; add new char at [a+32] (j, i+1)
    jsr next_rand
    lod b, [a]          ; set [32+a], [a]
    and b, 0xff00       ; and [32+a], 0xff00
    sto b, [a,32]
    
    lod x, y
    and x, 0x003f
    lod x, [chars,y]     ; bor [32+a], [chars+x]
    and x, 0x00ff
    
    orr x, [a,32]
    sto x, [a,32]
    lod b, [a]
    and b, 0x7fff       ; and [a], 0x7fff
    baw skip2
    
    empty_char:
    lod b, 0            ; set [32+a], 0
    sto b, [a,32]

    move_down:
    lod b, [a,32]       ; and [32+a], 0x7fff
    orr b, 0x7fff

    skip2:
    sub a, 2
    sub j, 1            ; ifg j, 0
    bne next_char2      ; jmp next_char2
  sub i, 1              ; ifg i, 0
  bne next_row2         ; jmp next_row2
lod y, x

; step 3 - update top layer
lod a, 0x8000
lod j, 0
next_char3:
  jsr next_rand
  lod b, y
  and b, 0x0700         ; ifb y, 0x0700
  bne skip3             ; jmp skip3
  
  lod b, [a]            ; ifb [a], 0xffff
  bne empty_char2       ; jmp empty_char2
  
  lod b, 0x5000         ; set [a], 0x2000
  sto b, [a]
  lod b, y              ; ifb y, 0x0800
  and b, 0x0800       
  bne no_set
  lod b, 0x6000         ; set [a], 0xa000
  sto b, [a]
no_set:
  lod x, y
  and x, 0x003f
  lod b, [chars,x]       ; bor [a], [chars+x]
  and b, 0x00ff
  
  orr b, [a]
  sto b, [a]
  baw skip3

  empty_char2:
  lod b, 0x0000         ; set [a], 0
  sto b, [a]

  skip3:
  add a, 2
  add j, 1
  cmp j, 32             ; ifg 32, j
  bne next_char3        ; jmp next_char3
  
jmp main_loop

chars:
.dat16 "00112334567889&||!!@==::**##<>>__TYYUDQZJJIX- ~~oiwlrkm//\\'[]^)`"